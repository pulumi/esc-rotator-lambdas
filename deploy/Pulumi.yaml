name: esc-rotator-lambda
description: >-
  This pulumi program will deploy the rotation lambda into your VPC and
  will set up a role to allow ESC to invoke it.
runtime: yaml

template:
  config:
    aws:region:
      description: The AWS region to deploy into
      default: us-west-2
    vpcId:
      description: The VPC ID where the Lambda will be deployed and can access RDS instances
      type: string
    subnetIds:
      description: List of subnet IDs where the Lambda will be deployed (private subnets recommended)
      type: array
    rdsSecurityGroupIds:
      description: Security group IDs of the RDS instances the Lambda needs to access
      type: array
    rdsPort:
      description: The port that RDS is listening on (default is for MySQL)
      default: 3306
    lambdaArchiveBucketPrefix:
      description: The name prefix of the regional s3 bucket that contains the lambda code archive
      default: "public-esc-rotator-lambdas-production"
    lambdaArchiveKey:
      description: The key of the lambda archive to deploy
      default: "aws-lambda/latest.zip"
    lambdaArchiveSigningProfileVersionArn:
      description: This signing profile is used to verify the authenticity of the lambda bundle
      default: "arn:aws:signer:us-west-2:616138583583:/signing-profiles/pulumi_esc_dev_20250321013308505700000001/yNMKxEZNc7"
    trustedAccount:
      description: This account will be allowed to invoke the lambda
      default: "arn:aws:iam::616138583583:root"

variables:
  lambdaArchiveBucket: ${lambdaArchiveBucketPrefix}-${aws:region}
  codeArtifact:
    fn::invoke:
      function: aws:s3:getObject
      arguments:
        bucket: ${lambdaArchiveBucket}
        key: ${lambdaArchiveKey}

resources:
  codeSigningConfig:
    type: aws:lambda:CodeSigningConfig
    properties:
      description: >-
        Pulumi ESC rotator-lambda signature -
        https://github.com/pulumi/esc-rotator-lambdas
      allowedPublishers:
        signingProfileVersionArns:
          - ${lambdaArchiveSigningProfileVersionArn}
      policies:
        untrustedArtifactOnDeployment: Enforce

  lambdaExecRole:
    type: aws:iam:Role
    properties:
      assumeRolePolicy:
        'fn::toJSON':
          Version: "2012-10-17"
          Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
      managedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  lambdaSecurityGroup:
    type: aws:ec2:SecurityGroup
    properties:
      vpcId: ${vpcId}
      description: Security group for Pulumi ESC rotation lambda
      ingress:
        - { protocol: "tcp", fromPort: ${rdsPort}, toPort: ${rdsPort}, securityGroups: ${rdsSecurityGroupIds} },
      egress:
        - { protocol: "-1", fromPort: 0, toPort: 0, cidrBlocks: ["0.0.0.0/0"] }

  lambda:
    type: aws:lambda:Function
    properties:
      description: >-
        The rotator lambda proxies a secret rotation request from Pulumi ESC to a service within your VPC.
      s3Bucket: ${codeArtifact.bucket}
      s3Key: ${codeArtifact.key}
      s3ObjectVersion: ${codeArtifact.versionId}
      codeSigningConfigArn: ${codeSigningConfig.arn}
      runtime: nodejs22.x
      handler: index.handler
      role: ${lambdaExecRole.arn}
      vpcConfig:
        subnetIds: ${subnetIds}
        securityGroupIds:
         - ${lambdaSecurityGroup.id}

  assumedRole:
    type: aws:iam:Role
    properties:
      name: PulumiESCRotatorLambdaInvocationRole
      description: Allow Pulumi ESC to invoke/manage the rotator lambda
      assumeRolePolicy:
        fn::toJSON:
          Version: "2012-10-17"
          Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                AWS: ${trustedAccount}
      inlinePolicies:
        - policy:
            fn::toJSON:
              Version: "2012-10-17"
              Statement:
                - Sid: AllowPulumiToInvokeLambda
                  Effect: Allow
                  Action:
                    - lambda:GetFunction
                    - lambda:InvokeFunction
                  Resource: ${lambda.arn}
                - Sid: AllowPulumiToUpdateLambda
                  Effect: Allow
                  Action: lambda:UpdateFunctionCode
                  Resource: ${lambda.arn}
                - Sid: AllowPulumiToFetchUpdatedLambdaArchives
                  Effect: Allow
                  Action: s3:GetObject
                  Resource: arn:aws:s3:::${lambdaArchiveBucket}/*

outputs:
  lambdaArn: ${lambda.arn}
  assumedRoleArn: ${assumedRole.arn}
